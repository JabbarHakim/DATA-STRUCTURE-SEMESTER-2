# -*- coding: utf-8 -*-
"""DATA STRUCTURE II.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GFnwTddimgDewDggszsrBWlvs6PBdcGl

# **LATIHAN I**
"""

# Definisi Node dalam Linked List
class TaskNode:
    def __init__(self, task_name):
        self.task_name = task_name # Menyimpan nama tugas
        self.next = None # Pointer ke tugas berikutnya

# Definisi Linked List untuk Daftar Tugas
class TaskList:
    def __init__(self):
        self.head = None # Daftar masih kosong

    # Menambahkan tugas Linked List
    def add_task(self, task_name):
        new_task = TaskNode(task_name)
        if not self.head:
            self.head = new_task # Jika List kosong, tugas pertama menjadi head

        else:
            current = self.head
            while current.next: # Mencari node terakhir dalam list
                current = current.next
            current.next = new_task # Menambahkan tugas di akhir list

    # Menampilkan daftar tugas
    def show_tasks(self):
        if not self.head:
            print("\n Daftar Mata Kuliah yang Kosong")
            return

        print("\n Daftar Mata Kuliah Hari Ini :")
        current = self.head
        count = 1
        while current:
            print(f"{count}. {current.task_name}")
            current = current.next
            count += 1


# Main Program
task_list = TaskList()

#Meminta pengguna memasukkan jumlah tugas
num_tasks = int(input("Masukkan Jumlah Mata Kuliah Hari ini : "))

# Meminta pengguna memasukkan nama tugas
for i in range(num_tasks):
  task_name = input(f"Masukkan Nama Kuliah Ke-{i+1} : ")
  task_list.add_task(task_name)

# Menampilkan daftar tugas
task_list.show_tasks()

class Node_Mata_Kuliah:
  def __init__(self, nama, sks, jam):
    self.nama = nama
    self.sks = sks
    self.jam = jam
    self.next = None

class Mata_Kuliah:
  def __init__(self):
    self.head = None

  def add_Mata_Kuliah(self, nama, sks, jam):
    new_matkul = Node_Mata_Kuliah(nama, sks, jam)
    if not self.head:
      self.head = new_matkul
    else:
      current = self.head
      while current.next:
        current = current.next
      current.next = new_matkul

  def tampilkan_Mata_Kuliah(self):
    if not self.head:
      print("Tidak ada mata kuliah yang ditambahkan.")
    else:
      current = self.head
      count = 1
      print("Mata kuliah hari Jum'at:")
      while current:
        print(f"{count}. {current.nama} | {current.sks} | {current.jam}")
        current = current.next
        count += 1

mata_kuliah = Mata_Kuliah()

jumlah_matkul = int(input("Masukkan jumlah mata kuliah yang ingin ditambahkan: "))
print("================================================================")
for i in range(1, jumlah_matkul + 1):
  nama_matkul = input(f"Masukkan nama mata kuliah ke-{i}: ")
  jumlah_sks = input(f" Masukkan jumlah sks mata kuliah ke-{i}: ")
  jam =  input(f" Masukkan jam mata kuliah ke-{i}: ")
  mata_kuliah.add_Mata_Kuliah(nama_matkul, jumlah_sks, jam)
print("================================================================")
mata_kuliah.tampilkan_Mata_Kuliah()

"""# **LATIHAN II**"""

# Definisi Node dalam Doubly Linked List
class FolderNode:
    def __init__(self, folder):
        self.folder = folder
        self.next = None
        self.prev = None

class NavigationHistory:
    def __init__(self):
        self.head = None
        self.tail = None

    def add_folder(self, folder):
        new_node = FolderNode(folder)
        if not self.head:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.prev = self.tail
            self.tail.next = new_node
            self.tail = new_node

    def go_back(self):
        if self.tail and self.tail.prev:
            self.tail = self.tail.prev
            print(f"Navigating back to: {self.tail.folder}")
        else:
            print("Already at the beginning of history.")

    def go_forward(self):
        if self.tail and self.tail.next:
            self.tail = self.tail.next
            print(f"Navigating forward to: {self.tail.folder}")
        else:
            print("Already at the end of history.")

    def show_history(self):
        if not self.head:
            print("Navigation history is empty.")
            return

        current = self.head
        print("Navigation History:")
        while current:
            print(current.folder)
            current = current.next

# Example usage
history = NavigationHistory()
history.add_folder("/home")
history.add_folder("/home/user")
history.add_folder("/home/user/documents")
history.add_folder("/home/user/pictures")

history.show_history()
print("========")
history.go_back()
history.go_back()
history.go_forward()
history.show_history()

"""# **LATIHAN III**"""

# Definisi Node dalam Singly Linked List
class Node:
    def __init__(self, data):
        self.data = data  # Menyimpan nilai node
        self.next = None  # Pointer ke node berikutnya

# Definisi Singly Linked List dengan Berbagai Operasi
class LinkedList:
    def __init__(self):
        self.head = None  # Awalnya, daftar kosong

    # Menambahkan elemen di awal
    def add_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    # Menambahkan elemen di akhir
    def add_at_end(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        temp = self.head
        while temp.next:
            temp = temp.next
        temp.next = new_node

    # Menambahkan elemen di posisi tertentu
    def add_at_position(self, position, data):
        if position < 0:
            print("Posisi tidak valid!")
            return
        new_node = Node(data)
        if position == 0:
            self.add_at_beginning(data)
            return
        temp = self.head
        for _ in range(position - 1):
            if not temp:
                print("Posisi melebihi panjang daftar!")
                return
            temp = temp.next
        new_node.next = temp.next
        temp.next = new_node

    # Menghapus elemen di awal
    def delete_at_beginning(self):
        if not self.head:
            print("Daftar kosong, tidak ada yang bisa dihapus!")
            return
        self.head = self.head.next

    # Menghapus elemen di akhir
    def delete_at_end(self):
        if not self.head:
            print("Daftar kosong, tidak ada yang bisa dihapus!")
            return
        if not self.head.next:
            self.head = None
            return
        temp = self.head
        while temp.next.next:
            temp = temp.next
        temp.next = None

    # Menghapus elemen di posisi tertentu
    def delete_at_position(self, position):
        if not self.head:
            print("Daftar kosong, tidak ada yang bisa dihapus!")
            return
        if position == 0:
            self.head = self.head.next
            return
        temp = self.head
        for _ in range(position - 1):
            if not temp or not temp.next:
                print("Posisi tidak ditemukan!")
                return
            temp = temp.next
        temp.next = temp.next.next

    # Mencari elemen dalam Linked List
    def search(self, key):
        temp = self.head
        while temp:
            if temp.data == key:
                print(f"Elemen {key} ditemukan dalam daftar!")
                return
            temp = temp.next
        print(f"Elemen {key} tidak ditemukan dalam daftar.")

    # Membalik (reverse) Linked List
    def reverse(self):
        prev = None
        current = self.head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        self.head = prev

    # Menampilkan Linked List
    def display(self):
        if not self.head:
            print("Daftar kosong!")
            return
        temp = self.head
        while temp:
            print(temp.data, end=" -> ")
            temp = temp.next
        print("None")

# ===== Program Utama (Main) ===== #

# Membuat objek Linked List
ll = LinkedList()

# Meminta pengguna memasukkan elemen awal
num_elements = int(input("\nMasukkan jumlah awal elemen dalam daftar: "))
for i in range(num_elements):
    data = input(f"Masukkan data ke-{i+1}: ")
    ll.add_at_end(data)

# Menu Operasi Linked List
while True:
    print("\nPilih Operasi:")
    print("1. Tambah elemen di awal")
    print("2. Tambah elemen di akhir")
    print("3. Tambah elemen di posisi tertentu")
    print("4. Hapus elemen di awal")
    print("5. Hapus elemen di akhir")
    print("6. Hapus elemen di posisi tertentu")
    print("7. Cari elemen dalam daftar")
    print("8. Balikkan daftar")
    print("9. Tampilkan daftar")
    print("0. Keluar")

    choice = int(input("\nMasukkan pilihan: "))

    if choice == 1:
        data = input("Masukkan data yang ingin ditambahkan di awal: ")
        ll.add_at_beginning(data)
    elif choice == 2:
        data = input("Masukkan data yang ingin ditambahkan di akhir: ")
        ll.add_at_end(data)
    elif choice == 3:
        position = int(input("Masukkan posisi untuk menambahkan data: "))
        data = input("Masukkan data yang ingin ditambahkan: ")
        ll.add_at_position(position, data)
    elif choice == 4:
        ll.delete_at_beginning()
    elif choice == 5:
        ll.delete_at_end()
    elif choice == 6:
        position = int(input("Masukkan posisi elemen yang ingin dihapus: "))
        ll.delete_at_position(position)
    elif choice == 7:
        key = input("Masukkan elemen yang ingin dicari: ")
        ll.search(key)
    elif choice == 8:
        ll.reverse()
        print("Daftar berhasil dibalik!")
    elif choice == 9:
        ll.display()
    elif choice == 0:
        print("\nKeluar dari program.")
        break
    else:
        print("\nPilihan tidak valid, silakan coba lagi!")

"""# **TUGAS**"""

# Tugas
class SatpamNode:
    def __init__(self, nama):
       self.nama = nama
       self.next = None

class Satpam:
    def __init__(self):
       self.current = None

    def add_satpam(self, nama):
       new_satpam = SatpamNode(nama)
       if not self.current:
          self.current = new_satpam
          self.current.next = self.current
       else:
          temp = self.current
          while temp.next != self.current:
              temp = temp.next
          temp.next = new_satpam
          new_satpam.next = self.current

    def show_jadwal_satpam(self, jumlah_hari):
       if not self.current:
          print("\n Tidak ada satpam")
          return
       print(f"Daftar Jadwal Satpam {jumlah_hari} hari kedepan:")
       temp = self.current
       count = 1
       while count <= jumlah_hari:
           day = count % 7
           if day == 1:
              print(f"{count}. Hari Senin: {temp.nama}")
           elif day == 2:
              print(f"{count}. Hari Selasa: {temp.nama}")
           elif day == 3:
              print(f"{count}. Hari Rabu: {temp.nama}")
           elif day == 4:
              print(f"{count}. Hari Kamis: {temp.nama}")
           elif day == 5:
              print(f"{count}. Hari Jum'at: {temp.nama}")
           elif day == 6:
              print(f"{count}. Hari Sabtu: {temp.nama}")
           elif day == 0:
              print(f"{count}. Hari Minggu: {temp.nama}")
           temp = temp.next
           count += 1


satpam = Satpam()

tambah_satpam = int(input("Masukan jumlah satpam: "))
while tambah_satpam > 0:
     nama_satpam = input(" Masukkan nama satpam: ")
     satpam.add_satpam(nama_satpam)
     tambah_satpam -= 1

print("\n")

jumlah_hari = int(input(" Masukkan jumlah hari dari jadwal satpam yang ingin dilihat: "))
satpam.show_jadwal_satpam(jumlah_hari)

class Node:
    def __init__(self, folder_name):
        self.folder_name = folder_name
        self.prev = None
        self.next = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def append(self, folder_name):
        new_node = Node(folder_name)
        if not self.head:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.prev = self.tail
            self.tail.next = new_node
            self.tail = new_node

    def display_history(self):
        current = self.head
        print("Riwayat Navigasi Folder:")
        while current:
            print(current.folder_name)
            current = current.next

    def navigate_back(self):
        if self.tail and self.tail.prev:
            self.tail = self.tail.prev
            print(f"Navigasi ke: {self.tail.folder_name}")
        else:
            print("Tidak ada folder sebelumnya.")

    def navigate_forward(self):
        if self.tail and self.tail.next:
            self.tail = self.tail.next
            print(f"Navigasi ke: {self.tail.folder_name}")
        else:
            print("Tidak ada folder berikutnya.")

# Contoh penggunaan
if __name__ == "__main__":
    folder_history = DoublyLinkedList()

    # Menambahkan folder ke dalam riwayat
    folder_history.append("Folder A")
    folder_history.append("Folder B")
    folder_history.append("Folder C")
    folder_history.append("Folder D")

    # Menampilkan riwayat navigasi
    folder_history.display_history()

    # Navigasi ke belakang
    folder_history.navigate_back()  # Navigasi ke Folder C
    folder_history.navigate_back()  # Navigasi ke Folder B

    # Navigasi ke depan
    folder_history.navigate_forward()  # Navigasi ke Folder C
    folder_history.navigate_forward()  # Navigasi ke Folder D

class Node:
    def __init__(self, folder_name):
        self.folder_name = folder_name
        self.prev = None
        self.next = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def append(self, folder_name):
        new_node = Node(folder_name)
        if not self.head:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.prev = self.tail
            self.tail.next = new_node
            self.tail = new_node

    def display_history(self):
        current = self.head
        print("Riwayat Navigasi Folder:")
        while current:
            print(current.folder_name)
            current = current.next

    def navigate_back(self):
        if self.tail and self.tail.prev:
            self.tail = self.tail.prev
            print(f"Navigasi ke: {self.tail.folder_name}")
        else:
            print("Tidak ada folder sebelumnya.")

    def navigate_forward(self):
        if self.tail and self.tail.next:
            self.tail = self.tail.next
            print(f"Navigasi ke: {self.tail.folder_name}")
        else:
            print("Tidak ada folder berikutnya.")

# Contoh penggunaan
if __name__ == "__main__":
    folder_history = DoublyLinkedList()

    # Menambahkan folder ke dalam riwayat
    folder_history.append("Folder A")
    folder_history.append("Folder B")
    folder_history.append("Folder C")
    folder_history.append("Folder D")

    while True:
        print("\nMenu Navigasi:")
        print("1. Tampilkan Riwayat Navigasi")
        print("2. Navigasi ke Folder Sebelumnya")
        print("3. Navigasi ke Folder Berikutnya")
        print("4. Keluar")

        choice = input("Pilih opsi (1-4): ")

        if choice == '1':
            folder_history.display_history()
        elif choice == '2':
            folder_history.navigate_back()
        elif choice == '3':
            folder_history.navigate_forward()
        elif choice == '4':
            print("Keluar dari program.")
            break
        else:
            print("Pilihan tidak valid. Silakan coba lagi.")

